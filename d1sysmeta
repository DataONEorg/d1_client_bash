#!/bin/bash
#
# Show system metadata for an object.

VERSION="Version 1.0.1"
APPNAME=$(basename "${0}")
APPDIR=$(dirname "${0}")
TMPDIR="/tmp"

#Takes stdin and URL encodes with output to stdout 
URLENCODE="${APPDIR}/urlencode"

# possibly override initialized variables
source "${APPDIR}/script_common.sh"
locateXML

baseurl=${NODE}
raw=""
sysm_dest="${TMPDIR}/sysmeta.$$.xml"
keep_sysm=""
test_only=""

usage()
{
cat << EOF

usage: $(basename $0) OPTIONS PID

Retrieve system metadata for object specified by PID from the node base URL 
indicated by the NODE environment variable or -b parameter.

OPTIONS:

  -h  Show this message
  -b  Node from which to retrieve system metadata (${baseurl})
  -E  Client certificate for authentication (optional)
  -r  Show raw response
  -v  Set log level (1=error ... 4=debug)
  -V  Show version and exit (${VERSION})
  -Y  File name for saved response document (${sysmdest})
  -k  Keep response document (default is to delete on exit)
  -t  Test if system metadat can be retrieved, write out return status. 
EOF
}


while getopts "hvVrktb:Y:E:" OPTION
do
    case $OPTION in
      h) usage; exit 1;;
      b) baseurl=$OPTARG;;
      v) verbose=1;;
      r) raw=1;;
      V) showVersion; exit 1;;
      Y) sysm_dest=$OPTARG;;
      E) client_cert=${OPTARG};;
      k) keep_sysm=1;;
      t) test_only=1;;
      \?) usage; exit 1;;
    esac
done

if [[ -z ${baseurl} ]]; then
  lerror "NODE or -b required"
  exit 1
fi
shift $(($OPTIND - 1))
if [[ -z ${1} ]]; then
  lerror "PID is required"
  exit 1
fi

PID="$(echo $1 | ${URLENCODE})"
linfo "PID     : ${1}"
linfo "Encoded : ${PID}"

url="${baseurl}/v1/meta/${PID}"
CMD="curl -k -s -w \"%{http_code}\" -o \"${sysm_dest}\" \"${url}\""
if [[ ! -z ${client_cert} ]]; then 
  CMD="curl -k -s -E \"${client_cert}\" -w \"%{http_code}\" -o \"${sysm_dest}\" \"${url}\""
fi
linfo "Command : ${CMD}"

status=$(eval ${CMD})
if [[ -n ${test_only} ]]; then
  echo ${status}
  exit
fi
EC=0
if [[ ${status} -eq "200" ]]; then
  if [[ -n ${raw} ]]; then
    cat ${sysm_dest}
  else
    linfo "Status  : ${status}"
    ${XML} fo ${sysm_dest}
  fi
else
  EC=2
  lerror "Status of response = ${status}"
  if [ ${LOGLEVEL} -gt 2 ]; then
    cat ${sysm_dest}
  fi
fi
if [[ -z ${keep_sysm} ]]; then
  rm ${sysm_dest}
fi
exit ${EC}
