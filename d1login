#!/bin/bash

# Open a browser, connect to CILogon then download the certificate.
# This command requires GUI, so don't expect to run it successfully on 
# a remote shell unless you are x-forwarding or something, and then the cert
# won't be where you expect it to be.

# This work was created by participants in the DataONE project, and is
# jointly copyrighted by participating institutions in DataONE. For
# more information on DataONE, see our web site at https://dataone.org.
#
#   Copyright 2015
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

VERSION="1.0.0"
APPNAME=$(basename "${0}")
APPDIR=$(dirname "${0}")
TMPDIR="/tmp"
test_cert=0
JNLP=""
CERTIFICATE=""
LOGON_ADDRESS="https://cilogon.org/?skin=dataone"

source "${APPDIR}/script_common.sh"
locateXML

usage() {
cat << EOF

usage: $(basename $0) OPTIONS [JNLP]

Obtain a client certificate for interaction with DataONE services.

OPTIONS:
  -e  Evaluate the downloaded certificate
  -h  Show this message
  -v  Set log level (1=error ... 4=debug)
  -V  Show version (${VERSION})

JNLP:
  The Java web-start document that is downloaded by the browser.

Obtaining the client certificate is a two-step process. First, the user must
authenticate with a CILogon service identity provider using a web browser. The 
response from this is a file "shibCILaunchGSCA.jnlp" which is a java-webstart
document. Running this script a second time with that file as an argument will
execute the java app and download the client certificate.

On OSX, the default browser will be opened to the login page. On other systems,
navigate to "${LOGON_ADDRESS}" and authenticate to retrieve the .jnlp file.

EOF
}


usageExamples () {
  usage
}


# Expects $JNLP = the jnlp file
downloadCert() {
  sed -i bak '/^$/d' ${JNLP}
  codebase=$(${XML} sel -t -m "//jnlp" -v "@codebase" ${JNLP})
  ldebug "codebase: ${codebase}"
  appjar=$(${XML} sel -t -m "//resources/jar" -v "@href" ${JNLP})
  ldebug "appjar: ${appjar}"
  mainclass=$(${XML} sel -t -m "//application-desc" -v "@main-class" ${JNLP})
  ldebug "mainclass: ${mainclass}"
  authtoken=$(${XML} sel -t -m "//argument[starts-with(.,'AuthenticationToken')]" -v .  ${JNLP})
  ldebug "authoken: ${authtoken}"
  webappurl=$(${XML} sel -t -m "//argument[starts-with(.,'WebAppURL')]" -v . ${JNLP})
  ldebug "webappurl: ${webappurl}"
  myuid=$(id -u)
  ldebug "myuid: ${myuid}"
  ${CURL} -s "${codebase}/${appjar}" > "${TMPDIR}/${appjar}"
  java -cp "${TMPDIR}/${appjar}" ${mainclass} \
    ${webappurl//[[:blank:]]/} \
    ${authtoken//[[:blank:]]/} \
    UseBundledCAs=true maxCleartextLifetime=1000000 minPassphraseLength=12 \
    DownloadCAs=false lifetime=64800
  CERTIFICATE="${TMPDIR}/x509up_u${myuid}"
}


# == Main ==

while getopts "hHv:Vt" OPTION
do
  case ${OPTION} in
    e) test_cert=1;;
    h) usage; exit 1;;
    H) usageExamples; exit 1;;
    V) showVersion; exit 1;;
    v) LOGLEVEL=${OPTARG};;
    \?) usage; exit 1;;
  esac
done

shift $((OPTIND-1))
JNLP=${1}
if [[ ! -f "${JNLP}" ]]; then
  echo "Opening browser. Re-run this script with the name of the downlaoded file."
  if [ "$(uname)" = "Darwin" ]; then
    open "${LOGON_ADDRESS}"
    exit 0;
  fi
  usage
  exit 1
fi
downloadCert
if [[ -f ${CERTIFICATE} ]]; then
  if [[ ${test_cert} -eq 1 ]]; then
    testCertificate
  fi
  linfo "Certificate file: ${CERTIFICATE}"
  echo ${CERTIFICATE}
else
  lerror "Certificate file not found ${CERTIFICATE}"
  exit 1
fi
