#!/bin/bash
#
# Creates content on a DataONE member node. 
#

VERSION="Version 1.2.1"
APPNAME=$(basename "${0}")
APPDIR=$(dirname "${0}")
TMPDIR="/tmp"

# possibly override initialized variables
source "${APPDIR}/script_common.sh"
locateXML

ldebug "Using curl at: ${CURL}"

if [[ ! -e ${CURL} ]]; then
  lerror "Could not find curl executable (${CURL}). Unable to continue."
  exit 1
fi

baseurl=${MNODE}
raw=0
dryrun=0
CMD=""
PID=""
#This value is set by script_common
client_certificate="${MY_CLIENT_CERT}"
submitter=""

# temp file destination
tmpfile="${TMPDIR}/${APPNAME}.$$.xml"


usage()
{
cat << EOF

usage: $(basename $0) OPTIONS SYSMETA FILE

Send FILE to a node using an MN.create call. The identifier specified in 
SYSMETA will be used for the object. 

OPTIONS:

  -h  Show this message
  -E  Certificate to use for authentication
  -b  Node to create the new object (${baseurl})
  -r  Show raw response
  -D  Dry run, do not send anything to the MN (default = No)
  -v  Set log level (1=error ... 4=debug)
  -V  Show version (${VERSION})

EOF
}


# Given $1 as a file containing system metadata, set $PID to the identifier
getIdentifierFromSystemMetadata() {
  PID=$(${XML} sel -t -m "//identifier" -v "." "${1}")
  linfo "Identifier detected as ${PID}" 
}


# validate system metadata
# errors are reported on stderr
# $1 = sysmetadata file
# Sets $is_valid
validateSystemMetadataV1() {
  ldebug "valdiateSystemMetadataV1 ${1}"
  local _schema="http://ns.dataone.org/service/types/v1"
  local _err="${TMPDIR}/${APPNAME}_val.$$.txt"
  ldebug ${_err}
  local _res=$(${XML} val --net -e -s ${_schema} ${1} 2>${_err})
  ldebug ${_res}
  is_valid=${_res##* }
  if [[ "${is_valid}" == "invalid" ]]; then
    while read line || [[ -n ${line} ]]; do
      lerror ${line}
    done < ${_err}
  fi
  rm ${_err}
}


# --- Main ---

while getopts "hv:VrDb:E:" OPTION
do
    case $OPTION in
      h) usage; exit 1;;
      r) raw=1;;
      b) baseurl="${OPTARG}";;
      E) client_certificate="${OPTARG}";;
      D) dryrun=1;;
      v) LOGLEVEL=${OPTARG};;
      V) show_version; exit 1;;
      \?) echo "ERROR:   Invalid option: -$OPTARG";usage; exit 1;;
    esac
done

shift $((OPTIND-1))
fsysmeta="${1}"
if [[ ! -f "${fsysmeta}" ]]; then
  lerror "System metadata file not found: ${fsysmeta}"
  exit 1  
fi

fobject="${2}"
if [[ ! -f "${fobject}" ]]; then
  lerror "Upload file not found: ${fobject}"
  exit 1  
fi

if [[ -z ${baseurl} ]]; then
  lerror "MNODE or -b required"
  exit 1
fi

validateSystemMetadataV1 "${fsysmeta}"
if [[ "${is_valid}" == "invalid" ]]; then
  lerror "System metadata is not valid. Aborting."
  exit 1
fi

getIdentifierFromSystemMetadata "${fsysmeta}"

ll=$(echo "10*(5-${LOGLEVEL})" | bc)
submitter=$(d1mysubject.py -l ${ll} "${client_certificate}")
if [[ $? -ne 0 ]]; then
  if [ -n ${dryrun} ]; then
    lwarn "Certificate has expired."
  else
    lerror "Certificate has expired."
  fi
fi
linfo "Submitter subject is: ${submitter}"


url="${baseurl}/v1/object"

CMD="${CURL} -k -s -E \"${client_certificate}\" -X POST -w \"%{http_code}\" \
 -o \"${tmpfile}\" -F \"pid=${PID}\" -F \"object=@${fobject}\" \
 -F \"sysmeta=@${fsysmeta}\" \"${url}\""

linfo "Command = ${CMD}"

if [[ ${dryrun} -gt 0 ]]; then
  status=0
  echo "Dry run was specified in script invocation." > ${tmpfile}
else
  status=$(eval ${CMD})
fi

if [[ ${status} -eq 200 ]]; then
  linfo "Status: OK"
  if [[ ${raw} -gt 0 ]]; then
    cat ${tmpfile}
  else
    ${XML} fo ${tmpfile}
  fi
elif [[ ${status} -eq 401 ]]; then
  lerror "Node responded with Not Authorized."
  lerror "Ensure subject \"${submitter}\" is authorized to create content"
  lerror "Server response follows:"
  ${XML} fo ${tmpfile}
else
  lerror "Status code = ${status}"
  if [ ${LOGLEVEL} -gt 1 ]; then
    linfo "Server response follows: "
    cat ${tmpfile}
  fi
fi
rm ${tmpfile}

