#!/bin/bash
# Creates content on a DataONE member node. Also handy for generating
# system metadata for testing purposes - see the -D and -k switches 
#
# You will need python source for d1_common_python and d1_instance_generator to 
# run this script. These can be retrieved from svn at:
#   https://repository.dataone.org/software/cicore/trunk
#
# D.V.
#

VERSION="Version 0.0.5"

#Base path to folder containing the python stuff
WD="$HOME/Workspaces/DataONE_trunk/"
export PYTHONPATH=".:$WD/d1_common_python/src:$WD/d1_instance_generator/src"

#Script that given a cert, prints subject to stdout
MYSUBJECT="$WD/d1_instance_generator/src/my_subject.py"

#Script to generate system metadata
GENSYS="$WD/d1_instance_generator/src/generate_sysmeta.py"

#Location of XMLStarlet command
XML="/usr/local/bin/xml"
TMP="/tmp"

#Destination of generated system metadata doc
sysmDest="${TMP}/sysmeta.$$.xml"
baseurl=${NODE}
raw=""
verbose=""
CMD=""
certificate=""
PID=""
oType="application/octet-stream"
nReplicas=3
keepSysm=""
dryrun=""


usage()
{
cat << EOF

usage: $(basename $0) OPTIONS FILE

Send FILE to a node. Command will create system metadata, and call create() on 
the node with base URL specified in the NODE environment variable or from the 
-b parameter.

OPTIONS:

  -h  Show this message
  -E  Certificate to use for authentication
  -i  Identifier of the new object
  -T  Object format identifier for new object
  -b  Node to create the new object (${baseurl})
  -a  Number of replicas to request (${nReplicas})
  -Y  Destination of generated system metadata (${sysmDest})
  -k  Keep system metadata (default = No)
  -r  Show raw response
  -D  Dry run, don't send anything to the MN (default = No)
  -v  Be a bit more verbose
  -V  Show version (${VERSION})

EOF
}

show_version()
{
  echo ${VERSION}
}


while getopts "hvVrkDb:E:i:a:T:Y:" OPTION
do
    case $OPTION in
      h) usage; exit 3;;
      v) verbose=1;;
      V) show_version; exit 3;;
      r) raw=1;;
      k) keepSysm=1;;
      b) baseurl=$OPTARG;;
      E) certificate=$OPTARG;;
      i) PID=$OPTARG;;
      a) nReplicas=$OPTARG;;
      T) oType=$OPTARG;;
      Y) sysmDest=$OPTARG;;
      D) dryrun=1;;
      \?) usage; exit 3;;
    esac
done

if [[ -z ${baseurl} ]]; then
  echo "NODE or -b required"
  exit 2
fi
if [[ -z ${PID} ]]; then
  echo "Identifier is required"
  exit 2
fi
if [[ -z ${certificate} ]]; then
  echo "Certificate is required"
  exit 2
fi
if [[ -z ${oType} ]]; then
  echo "Object format identifier is required"
  exit 2
fi
shift $(($OPTIND - 1))
OBJECT=$1
if [[ -z $OBJECT ]]; then
  echo "File for upload is required"
  exit 2
fi

my_subject=$(python ${MYSUBJECT} -l 40 ${certificate})
if [[ $? -ne 0 ]]; then
  if [[ -n ${dryrun} ]]; then
    echo "WARNING : certificate ${certificate} has expired."
  else
    echo "ERROR   : certificate ${certificate} has expired."
    exit 2
  fi
fi
if [[ -n ${verbose} ]]; then
  echo "SUBJECT : $my_subject"
fi

python ${GENSYS} -f "${OBJECT}" \
                 -i "${PID}" \
                 -t "${oType}" \
                 -s "${my_subject}" \
                 -n "${nReplicas}" > ${sysmDest}

if [[ -n ${verbose} ]]; then
  echo "Generated system metadata is located at: ${sysmDest}"
fi

url="${baseurl}/v1/object"
tmpfile="${TMP}/$(basename $0).$$.xml"

CMD="curl -k -s -E  \"${certificate}\" -X POST -w \"%{http_code}\" \
 -o \"${tmpfile}\" -F \"pid=${PID}\" -F \"object=@${OBJECT}\" \
 -F \"sysmeta=@${sysmDest}\" \"${url}\""

if [[ -n $VERBOSE ]]; then
  echo "Create Command = ${CMD}"
fi

if [[ -z ${dryrun} ]]; then
  status=$(eval ${CMD})
else
  status=0
  echo "Dry run was specified in script invocation." > ${tmpfile}
fi

if [[ ${status} == "200" ]]; then
  if [[ -n ${verbose} ]]; then
    echo "STATUS  : OK"
  fi
  if [[ -n ${raw} ]]; then
    cat ${tmpfile}
  else
    xml fo ${tmpfile}
  fi
else
  echo "ERROR   : Status of response = ${status}"
  if [[ -n ${verbose} ]]; then
    cat ${tmpfile}
    echo
  fi
fi
rm ${tmpfile}
if [[ -z ${keepSysm} ]]; then
  rm ${sysmDest}
fi

