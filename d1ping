#!/bin/bash
#
# Ping a DataONE node, returning the time taken for operation.
# Exit code and parameters can conform to nagios3 plugin expectations

VERSION="Version 0.0.3"
CURL="/usr/bin/curl -k -s -o /dev/null"

HTTP="https"
baseurl=$NODE
verbose=""
raw=""
nagios=""
warning=1.00
critical=10.0
host=""
ntype=""

usage()
{
cat << EOF

$(basename $0) OPTIONS

Ping the DataONE node specified by the NODE environment variable or from the -n
parameter. This script can be used as a Nagios plugin for a basic check of node
availablility. To do so, just call with -n and optionally -c and -w.

OPTIONS:

  -h  Show this message
  -b  Node to create the new object ($NODE)
  -r  Show raw response
  -v  Be a bit more verbose
  -V  Show version (${VERSION})
  -w  Warning threshold (ping time in seconds, ${warning})
  -c  Critical threshold (ping time in seconds, ${critical})
  -H  Host name, must set -P node type when used
  -P  Base path for node, e.g. "/knb/d1/mn", "/mn", or "/cn"
  -T  Don't use SSL (i.e. http rather than https)

EOF
}

show_version()
{
  echo ${VERSION}
}

## Parse the command line
while getopts "hvVrTb:w:c:H:P:" OPTION
do
    case $OPTION in
      h) usage; exit 1;;
      b) baseurl=$OPTARG;;
      v) verbose=1;;
      r) raw=1;;
      w) warning=$OPTARG;;
      c) critical=$OPTARG;;
      V) show_version;;
      H) host=$OPTARG;;
      P) basePath=$OPTARG;;
      T) HTTP="http";;
      \?) usage; exit 1;;
    esac
done

# Set baseurl if host and base path provided
if [[ -n ${host} ]]; then
  if [[ -z ${basePath} ]]; then
    echo "-P base path required with -H host"
    exit 3
  fi
  baseurl="${HTTP}://${host}${basePath}"
fi

if [[ -z ${baseurl} ]]; then
  echo "NODE, -b, or -H and -P required"
  exit 1
fi

## Ping API REST endpoint
url="${baseurl}/v1/monitor/ping"
if [[ -n ${verbose} ]]; then
  echo "URL     : ${url}"
fi

if [[ -n ${raw} ]]; then
  ## Just ping, verbosely and exit
  ${CURL} -v "${url}"
  exit 3
else
  ## Ping and retrieve status code from HTTP response
  CMD="${CURL} -w \"%{http_code} \" \"${url}\""
fi
if [[ -n ${verbose} ]]; then
  echo "Command : ${CMD}"
fi

## Run the request, timing how long it takes
SAVET=$TIMEFORMAT
TIMEFORMAT="%R"
res=( $( { time eval ${CMD}; } 2>&1 ) )
TIMEFORMAT=$SAVET

## Figure out the exit level based on response status and duration
## 3 = unknown, 2 = failure / critical, 1 = warning, 0 = sweet
if [[ -n ${verbose} ]]; then
  echo "Result  : ${res[0]}, ${res[1]}"
  exit 3
EC=2
echo ${res[1]}
if [[ "${res[0]}"=="200" ]]; then
  EC=1
  if [[ ${res[1]} < ${warning} ]]; then
    EC=0
  elif [[ ${res[1]} > ${critical} ]]; then
    EC=2
  fi
fi
exit ${EC}
