#!/bin/bash
#
# Calls list objects on Node and shows what comes back.
#
# This script can be used as a nagios3 plugin, but is only really useful for
# metrics collection rather than alerts since it just returns the number of
# objects on a node when run in nagios mode, i.e. with -g
#
# Example: (slowly) count objects that are not publicly readable on a Node:
#
# for id in $(d1listobjects -b $CNSB1 -I -C 300); do \
#  UPID=$(echo $id | urlencode); curl -k -s -w "%{http_code}" \
#  -o "/tmp/sysmeta.xml" "$CNSB1/v1/meta/${UPID}"; echo ", $id, $OT"; \
#  done | grep "401," | wc -l
#
# Example: create a sorted list of identifiers:
#
#  export NODE="https://cn.dataone.org/cn"
#  d1listobjects -A -I | sort
#
# Example: Retrieve all object identifiers added within the last hour
#
#  export NODE="https://cn.dataone.org/cn"
#  d1listobjects -A -I -M 60
#

#== Initialize a few things ==
VERSION="Version 1.0.0"
APPNAME=$(basename "${0}")
APPDIR=$(dirname "${0}")
TMPDIR="/tmp"

# possibly override initialized variables
source "${APPDIR}/script_common.sh"
locateXML

# temp file destination
tmpfile="${TMPDIR}/${APPNAME}.$$.xml"

URLENCODE="${APPDIR}/urlencode"
HTTP="https"

retrieve_all=0
ocount=3
ostart=0
baseurl="${NODE}"
verbose=""
raw=""
nagios=""
idsonly=""
offsetminutes=""
objectFormat=""
fromdate=""
OFFSETMINUTES=""
EC=1
DEBUG=0
showTotal=0

#== various routines ==

# Set $OFFSETMINUTES with date parameter suitable for current OS
# $1 is the number of minutes to be offset by
function dateMinutesOffset()
{
  #for os x
  if [ "$(uname)" = "Darwin" ]; then
    OFFSETMINUTES="-v-${1}M"
  else 
    #for linux (there is nothing else...)
    OFFSETMINUTES="-d-${1}minutes"
  fi
}


function usage()
{
cat << EOF

usage: $(basename $0) OPTIONS

Retrieve an object list from a DataONE node specified by the NODE environment 
variable or -n parameter.

OPTIONS:
  -h  Show this message
  -A  Retrieve everything (overrides -C, no)
  -b  BaseURL of node to retrieve objects from (${baseurl})
  -C  Number of entries to retrieve (${ocount})
  -D  If set, then only show objected created since specified date. Overrides -M
  -F  Restrict to specified object format 
  -g  Just return number of objects, overrides other params
  -H  Host name, must set -P node type when used (overrides -b)
  -I  Show identifiers only (default: no)
  -M  If set, then only show objects from now to specified minutes ago
  -P  Base path for node, e.g. "/knb/d1/mn", "/mn", or "/cn"
  -r  Show raw output instead of extracting pieces
  -S  Starting index for first entry (${ostart})
  -t  Show total object count (no)
  -T  Do not use SSL (i.e. http rather than https)
  -v  Be a bit more verbose
 
EOF
}


function getObjectList()
# expects:
#  $1 : listobjects url without the start and count parameters
#  $2 : destination file
#  $3 : start
#  $4 : count
# updates ${status}
{
   addURLKV ${1} "start" ${3}
   addURLKV ${URL} "count" ${4}
   #_url="${1}&start=${3}&count=${4}"
   local _cmd="curl -k -s -w \"%{http_code}\" -o \"${2}\" \"${URL}\""
   ldebug "URL = ${URL}"
   linfo "curl command = ${_cmd}"
   EC=3
   status=$(eval ${_cmd})
}


function rawObjectlistResponse()
# $1 : URL
# $2 : tmpfile
# $3 : start
# $4 : count
{
  getObjectList ${1} ${2} ${3} ${4}
  if [[ "${status}" -eq 200 ]]; then
   EC=0
   ${XML} fo ${2}
  else
    lerror "Server responded with status=${status}"
    lerror "Raw response follows:"
    cat ${2}
  fi
}


function generate_nagios_output() 
# $1 : URL
# $2 : tmpfile
{
  get_object_count ${1} ${2}
  if [[ "${status}" -eq 200 ]]; then
    EC=0
    if [[ "${object_count}" -eq 0 ]]; then
      EC=1
    fi
  fi
  echo ${object_count}
}


function getObjectCount() 
# $1 = URL
# $2 = tmpfile
# sets object_count
{
  object_count=0
  getObjectList ${1} ${2} 0 0
  if [[ ${status} == "200" ]]; then
    object_count=$(${XML} sel -N "d=${NAMESPACE}" \
      -t -m "//d:objectList" -v "@total" ${2})
  fi
}


# == Main ==
while getopts "hdv:rgtTVIAS:C:b:H:P:M:F:D:" OPTION
do
  case $OPTION in 
    h) usage; exit 1;;
    A) retrieve_all=1;;
    S) ostart=${OPTARG};;
    C) ocount=${OPTARG};;
    b) baseurl=${OPTARG};;
    r) raw=1;;
    v) LOGLEVEL=${OPTARG};;
    d) DEBUG=1;;
    t) showTotal=1;;
    g) nagios=1;
       ocount=0;
       ostart=0;;
    H) host=${OPTARG};;
    P) basePath=${OPTARG};;
    M) offsetminutes=${OPTARG};;
    D) fromdate=${OPTARG};;
    F) objectFormat=${OPTARG};;
    T) HTTP="http";;
    I) idsonly=1;;
    V) showVersion; exit 1;;
    \?) usage; exit 1;;
    esac
done

# Set baseurl if host and base path provided
if [[ -n ${host} ]]; then
  if [[ -z ${basePath} ]]; then
    lerror "-P base path required with -H host"
    exit 3
  fi
  baseurl="${HTTP}://${host}${basePath}"
  linfo "Base URL set to: ${baseurl}"
fi
if [[ -z ${baseurl} ]]; then
  lerror "NODE, -b, or -H and -P required"
  exit 1
fi

URL="${baseurl}/v1/object"
if [[ -n ${fromdate} ]]; then
  addURLKV ${URL} "fromDate" ${fromdate}
else
  if [[ -n ${offsetminutes} ]]; then
    dateMinutesOffset $offsetminutes
    dd=$(date ${OFFSETMINUTES} -u +%Y-%m-%dT%H:%M:%S)
    ldebug "Date for ${offsetminutes} minute offset is ${dd}"
    addURLKV ${URL} "fromDate" ${dd}
  fi
fi

if [[ -n ${objectFormat} ]]; then
  addURLKV "${URL}" "formatId" "${objectFormat}"
fi

if (( ${retrieve_all} > 0 )); then
  # request everything
  ocount=99999999
fi

if [[ -n ${raw} ]]; then
  rawObjectlistResponse ${URL} ${tmpfile} ${ostart} ${ocount}
elif [[ -n ${nagios} ]]; then 
  generate_nagios_output ${URL} ${tmpfile} 0 0
else
  STARTURL=${URL}
  GOT=${ostart}
  NGOT=0

  # Determine the number of matching entries
  getObjectCount ${URL} ${tmpfile}
  if [[ ${ocount} -gt ${object_count} ]]; then
    ocount=${object_count}
  fi
  TOGET=${ocount}

  # Keep retrieving pages from the server until all are retrieved.
  while (( ${TOGET} > 0 )); do
    # retrieve a page
    getObjectList ${STARTURL} ${tmpfile} ${GOT} ${TOGET}
    if [[ ${status} == "200" ]]; then
      EC=0
      NGOT=$(${XML} sel -N "d=${NAMESPACE}" \
             -t -m "//d:objectList" -v "@count" ${tmpfile})
      GOT=$(expr ${GOT} + ${NGOT})
      TOGET=$(expr ${ocount} - ${GOT})
      if (( ${DEBUG} > 0 )); then
        ldebug "ocount=${ocount}; GOT=${GOT}; NGOT=${NGOT}; TOGET=${TOGET}"
	  else
	      if [[ -n ${idsonly} ]]; then
	        ${XML} sel -N "d=${NAMESPACE}" \
	           -t -m "//objectInfo" -v "identifier" -n ${tmpfile} 
	      else
  		    if (( ${showTotal} > 0 )); then
  	  	        ${XML} sel -N "d=${NAMESPACE}" \
  		          -t -m "//d:objectList" -o "Total=" -v "@total" -n \
  		          -t -m "//objectInfo" \
  		             -v "substring(concat(size,'          '),1,10)" \
  		             -v "dateSysMetadataModified" -o "  "\
  		             -v "identifier" -o "  "\
  		             -v "formatId" \
  		             -n ${tmpfile}
  		    else
  	  	        ${XML} sel -N "d=${NAMESPACE}" \
  		          -t -m "//objectInfo" \
  		             -v "substring(concat(size,'          '),1,10)" \
  		             -v "dateSysMetadataModified" -o "  "\
  		             -v "identifier" -o "  "\
  		             -v "formatId" \
  		             -n ${tmpfile}
    			fi
	      fi
	  fi
    else
      lerror "Status of response = ${status}"
      lerror "Raw response follows: "
      if [[ -n ${verbose} ]]; then
        cat ${tmpfile}
      fi
      EC=2
      break;
    fi
  done
fi

rm ${tmpfile}
exit ${EC}
