#!/bin/bash
#
# Calls list objects on Node and shows what comes back.
#
# This script can be used as a nagios3 plugin, but is only really useful for
# metrics collection rather than alerts since it just returns the number of
# objects on a node when run in nagios mode, i.e. with -g
#
# Example: count objects that are not publicly readable on a Node:
#
# for id in $(d1listobjects -b $CNSB1 -I -C 300); do \
#  UPID=$(echo $id | urlencode); curl -k -s -w "%{http_code}" \
#  -o "/tmp/sysmeta.xml" "$CNSB1/v1/meta/${UPID}"; echo ", $id, $OT"; \
#  done | grep "401," | wc -l 

#== Initialize a few things ==
VERSION="Version 0.1.0"
XML="/usr/local/bin/xml"
TMP="/tmp"
NAMESPACE="d=http://ns.dataone.org/service/types/v1"
URLENCODE="`dirname $0`/urlencode"
HTTP="https"
ocount=3
ostart=0
baseurl="${NODE}"
verbose=""
raw=""
nagios=""
idsonly=""
offsetminutes=""
objectFormat=""
fromdate=""
OFFSETMINUTES=""
EC=1

#== various routines ==
function date_minutes_offset()
{
  #for os x
  UN=$(uname)
  if [ "$(uname)" = "Darwin" ]; then
    OFFSETMINUTES="-v-${1}M"
  else 
    #for linux (there is nothing else...)
    OFFSETMINUTES="-d-${1}minutes"
  fi
}

function usage()
{
cat << EOF

usage: $(basename $0) OPTIONS

Retrieve an object list from a DataONE node specified by the NODE environment 
variable or -n parameter.

OPTIONS:
  -h  Show this message
  -S  Starting index for first entry (${ostart})
  -C  Number of entries to retrieve (${ocount})
  -F  Restrict to specified object format 
  -b  BaseURL of node to retrieve objects from (${baseurl})
  -H  Host name, must set -P node type when used (overrides -b)
  -P  Base path for node, e.g. "/knb/d1/mn", "/mn", or "/cn"
  -r  Show raw output instead of extracting pieces
  -v  Be a bit more verbose
  -g  Just return number of objects, overrides other params
  -M  If set, then only show objects from now to specified minutes ago
  -D  If set, then only show objected created since specified date. Overrides -M
  -T  Do not use SSL (i.e. http rather than https)
  -I  Show identifiers only (default: no)
 
EOF
}


function show_version()
{
  echo ${VERSION}
}


function add_url_kv()
# $1 = URL
# $2 = Key
# $3 = Value (will be URL encoded)
# updates ${URL}
{
  delim="?"
  if [[ "${1}" == *\?* ]]; then
    delim="&"
  fi
  uval=$(echo $3 | ${URLENCODE})
  URL="${1}${delim}${2}=${uval}"
}


function get_object_list()
# expects:
#  $1 : listobjects url without the start and count parameters
#  $2 : destination file
#  $3 : start
#  $4 : count
# updates ${status}
{
   add_url_kv ${1} "start" ${3}
   add_url_kv ${URL} "count" ${4}
   #_url="${1}&start=${3}&count=${4}"
   _cmd="curl -k -s -w \"%{http_code}\" -o \"${2}\" \"${URL}\""
   if [[ -n ${verbose} ]]; then
     echo "URL     : ${URL}"
     echo "Command : ${_cmd}"
     echo
   fi
   EC=3
   status=$(eval ${_cmd})
}


function raw_objectlist_response()
# $1 : URL
# $2 : tmpfile
# $3 : start
# $4 : count
{
   get_object_list ${1} ${2} ${3} ${4}
   if [[ ${status} == "200" ]]; then
     EC=0
     ${XML} fo ${2}
   fi
}


function generate_nagios_output() 
# $1 : URL
# $2 : tmpfile
{
  get_object_count ${1} ${2}
  if [[ ${status} -eq "200" ]]; then
    EC=0
    if [[ ${object_count} -eq 0 ]]; then
      EC=1
    fi
  fi
  echo ${object_count}
}


function get_object_count() 
# $1 = URL
# $2 = tmpfile
# sets object_count
{
  object_count=0
  get_object_list ${1} ${2} 0 0
  if [[ ${status} == "200" ]]; then
    object_count=$(${XML} sel -N "${NAMESPACE}" \
      -t -m "//d:objectList" -v "@total" ${2})
  fi
}


# == Main ==
while getopts "hvrgTVIS:C:b:H:P:M:F:D:" OPTION
do
  case $OPTION in 
    h) usage; exit 1;;
    S) ostart=$OPTARG;;
    C) ocount=$OPTARG;;
    b) baseurl=$OPTARG;;
    r) raw=1;;
    v) verbose=1;;
    g) nagios=1;
       ocount=0;
       ostart=0;;
    H) host=$OPTARG;;
    P) basePath=$OPTARG;;
    M) offsetminutes=$OPTARG;;
    D) fromdate=$OPTARG;;
    F) objectFormat=$OPTARG;;
    T) HTTP="http";;
    I) idsonly=1;;
    V) show_version; exit 1;;
    \?) usage; exit 1;;
    esac
done

# Set baseurl if host and base path provided
if [[ -n ${host} ]]; then
  if [[ -z ${basePath} ]]; then
    echo "-P base path required with -H host"
    exit 3
  fi
  baseurl="${HTTP}://${host}${basePath}"
fi
if [[ -z ${baseurl} ]]; then
  echo "NODE, -b, or -H and -P required"
  exit 1
fi

URL="${baseurl}/v1/object"
if [[ -n ${fromdate} ]]; then
  add_url_kv ${URL} "fromDate" ${fromdate}
else
  if [[ -n ${offsetminutes} ]]; then
    date_minutes_offset $offsetminutes
    dd=$(date ${OFFSETMINUTES} -u +%Y-%m-%dT%H:%M:%S)
    add_url_kv ${URL} "fromDate" ${dd}
  fi
fi

if [[ -n ${objectFormat} ]]; then
  add_url_kv "${URL}" "objectFormat" "${objectFormat}"
fi

tmpfile="${TMP}/$(basename $0).$$.xml"

if [[ -n ${raw} ]]; then
  raw_objectlist_response ${URL} ${tmpfile} ${ostart} ${ocount}
elif [[ -n ${nagios} ]]; then 
  generate_nagios_output ${URL} ${tmpfile} 0 0
else
  STARTURL=${URL}
  GOT=0
  NGOT=0
  get_object_count ${URL} ${tmpfile}
  if [[ ${ocount} -gt ${object_count} ]]; then
    ocount=${object_count}
  fi
  TOGET=${ocount}
  while [ $GOT -lt ${TOGET} ]; do
    get_object_list ${STARTURL} ${tmpfile} ${GOT} ${TOGET}
    if [[ ${status} == "200" ]]; then
      EC=0
      NGOT=$(${XML} sel -N "${NAMESPACE}" \
             -t -m "//d:objectList" -v "@count" ${tmpfile})
      GOT=$(expr ${GOT} + ${NGOT})
      TOGET=$(expr ${ocount} - ${GOT})
      if [[ -n ${idsonly} ]]; then
        ${XML} sel -N "${NAMESPACE}" \
           -t -m "//objectInfo" -v "identifier" -n ${tmpfile} 
      else
        ${XML} sel -N "${NAMESPACE}" \
          -t -m "//d:objectList" -o "Total=" -v "@total" -n \
          -t -m "//objectInfo" \
             -v "substring(concat(size,'          '),1,10)" \
             -v "identifier" -o "  "\
             -v "formatId" \
             -n ${tmpfile}
      fi
    else
      echo "ERROR   : Status of response = ${status}"
      if [[ -n ${verbose} ]]; then
        cat ${tmpfile}
      fi
      EC=2
      break;
    fi
  done
fi

rm ${tmpfile}
exit ${EC}
