#!/bin/bash
# 
# Report on a PID
#

VERSION="1.3.1"
APPNAME=$(basename "${0}")
APPDIR=$(dirname "${0}")
TMPDIR="/tmp"
URLENCODE="${APPDIR}/urlencode"

# possibly override initialized variables
source "${APPDIR}/script_common.sh"
locateXML

sysm_dest="${TMPDIR}/sysmeta.$$.xml"
node_list="${TMPDIR}/nodes.$$.xml"
search_out="${TMPDIR}/search.$$.xml"

base_url="${NODE}"
show_obsol_chain=0
show_search_index=0
grep_logs=0


function lecho() {
  if [[ ! -z ${3} ]]; then
    printf ${3}
  fi
  if [[ ! -z ${4} ]]; then
    printf "%20s : %${4}s\n" "${1}" "${2}"
  else
    printf "%20s : %s\n" "${1}" "${2}"
  fi
  if [[ ! -z ${3} ]]; then
    printf ${_NCOLOR}
  fi
}


function usage() {
cat << EOF
${APPNAME} version ${VERSION}

usage: ${APPNAME} OPTIONS PID

Show information about an identifier in DataONE.

OPTIONS:
  -h  Show this message
  -H  Show this message with examples
  -b  Base URL of Coordinating Node to use
  -o  Show obsolescence chain for object
  -s  Show presence of object in CN search index
  -L  SSH to CN and grep some logs (can be verbose!)
  -v  Set log level (1=error ... 4=debug)
  -V  Show version and exit

PID:
  The identifier to lookup. 

EOF
}


function usageExamples() {
  usage
cat << EOF
Example - Lookup information about "knb-lter-cap.247.4" using the default 
Coordinating Node (${base_url}). Show obsolescence chain and info from CN 
search index:

  ./${APPNAME} -o -s "kgordon.31.26"

Where:

  Evaluating        : The identifier being evaluated
  URL encoded       : URL encoded form of the identifier
  CN HTTP Response  : HTTP status code when requesting system metadata from CN
  Date uploaded     : Date object was uploaded to MN, as reported by sys meta
  Date modified     : Date sys meta was last modified
  Origin Member Node: The node id of the origin MN
  Auth Member Node  : The node id of the authoritative MN
  Submitter         : Identity of the submitter
  Rights Holder     : Identity of the rights holder of the object
  Archived          : Has the object been archived?
  Format ID         : What is the format ID of the object
  Obsoletes         : Indicates the PID that this object obsoletes if present. 
                      The obsolesence chain is followed until no more PIDs are 
                      obsoleted. The last entry will be the oldest (original) 
                      PID in the obsolesence chain.
  Obsoleted By      : Indicates the PID that obsoletes this object, if present.
                      The obsolescence chain is followed until no more PIDs are
                      obsoleteing. The last entry will be the newest (current 
                      head) of the obsolesence chain.
  Replica           : The node ID of a known replica holder. Sys meta 
                      availability is tested and reported as the HTTP 
                      status code.
  Search status     : The status code 
  Search Type       : The category of object as reposrted by search index
  Search Modified   : Date sys meta modified as reported by search index
  Search Uploaded   : Date uploaded as reported by search index
  Documents         : Indicates which PIDs this metadata documents (if type is 
                      Science Metadata "METADATA").
  Documented By     : Indicates which metadata documents this object (if type 
                      is "DATA")
  In Package        : Indicates the PID of the package that contains the object.

EOF
}


function loadNodes() {
  linfo "Loading node list..."
  local url="${base_url}/v1/node"
  local CMD="curl -k -s -w \"%{http_code}\" -o \"${node_list}\" \"${url}\""
  status=$(eval ${CMD})
  ldebug "loadNodes HTTP status = ${status}"
  if (( ${status} != 200 )); then
    lerror "Status code of ${status} returned for listNodes"
    lerror "URL = ${url}"
  fi
}


function processSearchIndex() {
  # look for PID $1 entry in search index
  ldebug "processSearchIndex ${1}"
  local term=$(escapeSolrTerm ${1})
  linfo "Escaped identifier = ${term}"
  local q="$(echo "identifier:${term}" | ${URLENCODE})"
  local url="${base_url}/v1/query/solr/?q=${q}"
  local CMD="curl -k -s -w \"%{http_code}\" -o \"${search_out}\" \"${url}\""
  linfo "CMD = ${CMD}"
  local status=$(eval ${CMD})
  lecho "Search status" "${status}"
  local num_found=$(${XML} sel -t -m "//result" -v "@numFound" ${search_out})
  local otype=$(${XML} sel -t -m "//str[@name='formatType']" -v "." ${search_out})
  if [[ "${num_found}" == "0" ]]; then
    lerror "No entries found in search index."
  fi
  lecho "Search Type" ${otype}
  lecho "Search Modified" "$(${XML} sel -t -m "//date[@name='dateModified']" -v "." ${search_out})"
  lecho "Search Uploaded" "$(${XML} sel -t -m "//date[@name='dateUploaded']" -v "." ${search_out})"
  if [[ ${otype} == "METADATA" ]]; then
    # What does this metadata document?
    local documents=$(${XML} sel -t -m "//arr[@name='documents']" -v "str" ${search_out})
    if [[ -z ${documents} ]]; then
      lwarn "PID refers to METADATA but no 'documents' entries found in index."
    fi
    for document in ${documents}; do
      lecho "Documents" "${document}"
    done
  fi
  if [ "${otype}" == "METADATA" ] || [ "${otype}" == "DATA" ] ; then
    local rmaps=$(${XML} sel -t -m "//arr[@name='resourceMap']" -v "str" ${search_out})
    if [[ -z ${rmaps} ]]; then
      lwarn "PID refers to ${otype} but no 'resourceMap' entries found in index."
    fi
    for rmap in ${rmaps}; do
      lecho "In Package" "${rmap}"
    done
  fi
  if [ "${otype}" == "RESOURCE" ]; then
    # Lookup all the objects contained in this resource map
    linfo "Evaluating resource map references"
    term=$(escapeSolrTerm ${1})
    q="$(echo "resourceMap:${term}" | ${URLENCODE})"
    local url="${base_url}/v1/query/solr/?fl=identifier&q=${q}"
    local CMD="curl -k -s -w \"%{http_code}\" -o \"${search_out}\" \"${url}\""
    linfo "CMD = ${CMD}"
    status=$(eval ${CMD})
    lecho "Search Resource Map" "${status}"
    local documents=$(${XML} sel -t -m "//str[@name='identifier']" -v  "." -n ${search_out})
    if [[ -z ${documents} ]]; then
      lwarn "Object is a Resource Map but index has not references to data or metadata."
    fi
    for doc in ${documents}; do
      lecho "Has contents" "${doc}"
    done
  fi
}


function showLocations() {
  # $1 = system metadata
  # $2 = encoded pid
  ldebug "showLocations"
  local replicas=$($XML sel -t -m "//replica" -v "replicaMemberNode" -n ${1})
  local lstatus=""
  local sysm="${sysm_dest}.3"
  for replica in ${replicas}; do
    local burl=$($XML sel -t -m "//node[identifier = '${replica}']" -v "baseURL" ${node_list})
    burl="${burl}/v1/meta/${2}"
    linfo "Replica system metadata URL = ${burl}"
    local CMD="curl -k -s -w \"%{http_code}\" -o \"${sysm}\" \"${burl}\""
    status=$(eval ${CMD})
    lecho "Replica" "${replica}  (HTTP: ${status})"
  done
}


function followObsoletes() {
  ldebug "followObsoletes"
  local xp="//obsoletes"
  local msg="Obsoletes"
  local indent="$(printf '%*s' "${2}" | tr ' ' "-")+"
  if [[ ${3} == "obsoletedBy" ]]; then
    xp="//obsoletedBy"
    msg="Obsoleted By"
    indent="$(printf '%*s' ${2})+-"
  fi
  local epid="$(echo ${1} | ${URLENCODE})"
  local url="${base_url}/v1/meta/${epid}"
  local sysm="${sysm_dest}.2"
  local CMD="curl -k -s -w \"%{http_code}\" -o \"${sysm}\" \"${url}\""
  linfo ${CMD}
  status=$(eval ${CMD})
  linfo "HTTP status = ${status}"
  if (( ${status} != 200 )); then
    lerror "Unable to access obsoleted object (${status}): ${1}"
    return
  fi
  local obsol=$(${XML} sel -t -m "${xp}" -v "." ${sysm})
  local arch=$(${XML} sel -t -m "//archived" -v "." ${sysm})
  rm ${sysm}
  if [[ -z ${obsol} ]]; then
    return
  fi
  lecho "${msg}" "${indent} ${obsol} (HTTP: ${status}, archived: ${arch})"
  followObsoletes ${obsol} $(expr 2 + ${2}) ${3}
}


function processSystemMetadata() {
  # $1 = path to system metadata
  # $2 = PID encoded
  ldebug "processSystemMetadata"
  local pid=$(${XML} sel -t -m "//identifier" -v "." ${1})
  local origin_mn=$(${XML} sel -t -m "//originMemberNode" -v "." ${1})
  local auth_mn=$(${XML} sel -t -m "//authoritativeMemberNode" -v "." ${1})
  local submitter=$(${XML} sel -t -m "//submitter" -v "." ${1})
  local rholder=$(${XML} sel -t -m "//rightsHolder" -v "." ${1})
  local obsol=$(${XML} sel -t -m "//obsoletes" -v "." ${1})
  local obsol_by=$(${XML} sel -t -m "//obsoletedBy" -v "." ${1})
  local arch=$(${XML} sel -t -m "//archived" -v "." ${1})
  local fmtid=$(${XML} sel -t -m "//formatId" -v "." ${1})
  local uploaded=$(${XML} sel -t -m "//dateUploaded" -v "." ${1})
  local modified=$(${XML} sel -t -m "//dateSysMetadataModified" -v "." ${1})
  lecho "Date uploaded" "${uploaded}"
  lecho "Date modified" "${modified}"
  lecho "Origin Member Node" "${origin_mn}"
  lecho "Auth Member Node" "${auth_mn}"
  lecho "Submitter" "${submitter}"
  lecho "Rights Holder" "${rholder}"
  lecho "Archived" "${arch}"
  lecho "Format ID" "${fmtid}"

  if (( ${show_obsol_chain} > 0 )); then
    if [[ ! -z ${obsol} ]]; then
      followObsoletes ${pid} "0" "obsoletes"
    fi
    if [[ ! -z ${obsol_by} ]]; then
      followObsoletes ${pid} "0" "obsoletedBy"
    fi
  fi

  showLocations ${sysm_dest} ${2}
}


function getPidInfo() {
  # $1 = PID
  ldebug "getPIDInfo"
  lecho "Evaluating" ${PID}
  local PID_encoded="$(echo ${PID} | ${URLENCODE})"
  lecho "URL encoded" ${PID_encoded}

  #get system metadata and status code
  local url="${base_url}/v1/meta/${PID_encoded}"
  linfo "System metadata = ${sysm_dest}"
  local CMD="curl -k -s -w \"%{http_code}\" -o \"${sysm_dest}\" \"${url}\""
  linfo ${CMD}
  status=$(eval ${CMD})
  lecho "CN HTTP Response" ${status}
  if (( ${status} != 200 )); then
    lerror "Further evaluation not possible, terminating."
    return
  fi
  processSystemMetadata ${sysm_dest} ${PID_encoded}

  if (( ${show_search_index} > 0 )); then
    processSearchIndex ${PID}
  fi
}

# WARNING: This operation can be rather verbose, depending on the activity 
# associated with the PID
#
# You also need shell access on the CN and permission to read the logs, usually 
# means a member of group adm
#
# Connect to the CN via SSH and retrieve information about the PID from the 
# following logs:
#   /var/log/dataone/synchronize/cn-synchronization.log*
#
# Input:
#  $1 = level of detail (integer)
#  $2 = PID to look for
function grepCNLogsForPID() {
  local _hostname=$(getHostFromURL ${base_url})
  linfo "Hostname = ${_hostname}"

  #Check ssh access
  ldebug "Checking ssh ${USER}@${_hostname}"
  if ssh ${_hostname} exit; [ $? -eq 255 ]; then
    lerror "Unable to ssh ${USER}@${_hostname}"
    return
  fi

  local _dest_file="${TMPDIR}/synclog.$$.xml"
  local _logbase="/var/log/dataone"
  local _cmd="cd ${_logbase}/synchronize; grep '${2}' cn-synchronization.log*"
  linfo "Command = ${_cmd}"
  echo "###" > ${_dest_file}
  echo "# ${_cmd}" >> ${_dest_file}
  echo "###" >> ${_dest_file}
  ssh ${_hostname} ${_cmd} >> ${_dest_file}

  _cmd="cd ${_logbase}/index; grep '${2}' cn-index-generator-daemon.log*"
  linfo "Command = ${_cmd}"
  echo "" >> ${_dest_file}
  echo "###" >> ${_dest_file}
  echo "# ${_cmd}" >> ${_dest_file}
  echo "###" >> ${_dest_file}
  ssh ${_hostname} ${_cmd} >> ${_dest_file}

  _cmd="cd ${_logbase}/index; grep '${2}' cn-index-processor-daemon.log*"
  linfo "Command = ${_cmd}"
  echo "" >> ${_dest_file}
  echo "###" >> ${_dest_file}
  echo "# ${_cmd}" >> ${_dest_file}
  echo "###" >> ${_dest_file}
  ssh ${_hostname} ${_cmd} >> ${_dest_file}

  cat ${_dest_file}
}


# === Main ===
while getopts "hHv:Vosb:L:" OPTION
do
  case ${OPTION} in
    h) usage; exit 1;;
    H) usageExamples; exit 1;;
    V) showVersion; exit 1;;
    v) LOGLEVEL=${OPTARG};;
    o) show_obsol_chain=1;;
    s) show_search_index=1;;
    b) base_url=${OPTARG};;
    L) grep_logs=${OPTARG};;
    \?) usage; exit 1;;
  esac
done

shift $((OPTIND-1))
PID=${1}
if [[ -z ${PID} ]]; then
  echo "PID is required."
  exit 1
fi
locateXML
loadNodes
getPidInfo "${PID}"
if (( ${grep_logs} > 0)); then
  grepCNLogsForPID ${grep_logs} "${PID}"
fi
linfo "Cleaning up"
rm ${sysm_dest}
rm ${node_list}
rm -f ${search_out}
