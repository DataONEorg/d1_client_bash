#!/bin/bash
#
# Calls getLogRecords on Node and shows what comes back.
#
# Example: Retrieve all log records within the last hour
#
#  export NODE="https://cn.dataone.org/cn"
#  d1logrecords -c cnode.pem -M 60
#
# Example: Retrieve log records since 2014-10-01T00:00:00 for create events
#
# export NODE="https://cn.dataone.org/cn"
# d1logrecords -D "2014-10-01T00:00:00" -E create -c cnode.pem
#

#== Initialize a few things ==
VERSION="Version 1.1.0"
XML="/usr/local/bin/xml"
TMP="/tmp"
NAMESPACE="d=http://ns.dataone.org/service/types/v1"
URLENCODE="`dirname $0`/urlencode"
HTTP="https"
ocount=3
ostart=0
baseurl="${NODE}"
verbose=""
raw=""
nagios=""
idsonly=""
offsetminutes=""
objectFormat=""
fromdate=""
todate=""
OFFSETMINUTES=""
EC=1
DEBUG=0
showTotal=0
eventtype=""
certificate=""
exportdest=""
sqldest=""
cachedest=""
# Record metadata about the cache
cache_meta_name="logcache_metadata.txt"
# Each page is saved with the name and a counter added to the end with 
# extension .xml
cache_record_name="log_"
# Name of the cache log counter file
cache_page_counter="page_count.txt"

#== various routines ==
function date_minutes_offset()
{
  #for os x
  UN=$(uname)
  if [ "$(uname)" = "Darwin" ]; then
    OFFSETMINUTES="-v-${1}M"
  else 
    #for linux (there is nothing else...)
    OFFSETMINUTES="-d-${1}minutes"
  fi
}

function usage()
{
cat << EOF

usage: $(basename $0) OPTIONS

Retrieve an object list from a DataONE node specified by the NODE environment 
variable or -n parameter.

OPTIONS:
  -h  Show this message
  -c  Client certificate to use, .pem format (none)
  -S  Starting index for first entry (${ostart})
  -C  Number of entries to retrieve (${ocount})
  -E  Event to retrieve (all records)
  -t  Show total object count (No)
  -F  Restrict to specified object format 
  -b  BaseURL of node to retrieve objects from (${baseurl})
  -H  Host name, must set -P node type when used (overrides -b)
  -P  Base path for node, e.g. "/knb/d1/mn", "/mn", or "/cn"
  -r  Show raw output instead of extracting pieces
  -v  Be a bit more verbose
  -g  Just return number of records, overrides other params
  -M  If set, then only show records from now to specified minutes ago
  -B  If set, then only show records since specified date. Overrides -M
  -D  if set, then only show records up to specified date.
  -X  Extract logRecord entries stdout.
  -A  Get all log records, saving each page of response as a separate file in the specified folder

  -T  Do not use SSL (i.e. http rather than https)
EOF
}


function show_version()
{
  echo ${VERSION}
}


function echoerr() {
  echo "$@" 1>&2;
}


function add_url_kv()
# $1 = URL
# $2 = Key
# $3 = Value (will be URL encoded)
# updates ${URL}
{
  delim="?"
  if [[ "${1}" == *\?* ]]; then
    delim="&"
  fi
  uval=$(echo $3 | ${URLENCODE})
  URL="${1}${delim}${2}=${uval}"
}


function get_log_list()
# expects:
#  $1 : getLogRecords url without the start and count parameters
#  $2 : destination file
#  $3 : start
#  $4 : count
# updates ${status}
{
   add_url_kv ${1} "start" ${3}
   add_url_kv ${URL} "count" ${4}
   #_url="${1}&start=${3}&count=${4}"
   _cmd="curl -k -s --cert ${certificate} -w \"%{http_code}\" -o \"${2}\" \"${URL}\""
   if [[ -n ${verbose} ]]; then
     echoerr "URL     : ${URL}"
     echoerr "Command : ${_cmd}"
     echoerr
   fi
   EC=3
   status=$(eval ${_cmd})
}


function raw_loglist_response()
# $1 : URL
# $2 : tmpfile
# $3 : start
# $4 : count
{
   get_log_list ${1} ${2} ${3} ${4}
   if [[ ${status} == "200" ]]; then
     EC=0
     ${XML} fo ${2}
   fi
}


function generate_nagios_output() 
# $1 : URL
# $2 : tmpfile
{
  get_log_count ${1} ${2}
  if [[ ${status} -eq "200" ]]; then
    EC=0
    if [[ ${log_count} -eq 0 ]]; then
      EC=1
    fi
  fi
  echo ${log_count}
}


function get_log_count() 
# $1 = URL
# $2 = tmpfile
# sets object_count
{
  log_count=0
  get_log_list ${1} ${2} 0 0
  if [[ ${status} == "200" ]]; then
    log_count=$(${XML} sel -N "${NAMESPACE}" \
      -t -m "//d:log" -v "@total" ${2})
  fi
}


function setupSqlDatabase() {
  #create an sqlite3 database and necessary tables.
  #will not overwrite database or tables
  #$1 is name of destination database file
  #table will be "legrecords"
  if [[ -f ${1} ]]; then
    echo "Destination database exists."
    return
  fi
  sqlite3 ${1} "create table logrecords (id INTEGER PRIMARY KEY AUTOINCREMENT, tstamp INTEGER, source TEXT, recordId TEXT, content TEXT);"
}


function insertLogRecord() {
  local source=$(echo ${2} | xml sel -t -m "//nodeIdentifier" -v . )
  echo ${source}
  #sqlite3 ${1} "INSERT INTO logrecords (source, recordId, content) VALUES ('${source}','${3}')"
}


# == Main ==
while getopts "hdvrgtTVIS:C:b:H:P:M:F:D:B:X:c:E:Q:A:" OPTION
do
  case $OPTION in 
    h) usage; exit 1;;
    S) ostart=$OPTARG;;
    C) ocount=$OPTARG;;
    b) baseurl=$OPTARG;;
    r) raw=1;;
    v) verbose=1;;
    d) DEBUG=1;;
    t) showTotal=1;;
    g) nagios=1;
       ocount=0;
       ostart=0;;
    H) host=$OPTARG;;
    P) basePath=$OPTARG;;
    M) offsetminutes=$OPTARG;;
    B) fromdate=$OPTARG;;
    D) todate=$OPTARG;;
    F) objectFormat=$OPTARG;;
    T) HTTP="http";;
    I) idsonly=1;;
    V) show_version; exit 1;;
    c) certificate=$OPTARG;;
    E) eventtype=$OPTARG;;
    X) exportdest=$OPTARG;;
    Q) sqldest=${OPTARG};;
    A) cachedest=${OPTARG};;
    \?) usage; exit 1;;
    esac
done

# Set baseurl if host and base path provided
if [[ -n ${host} ]]; then
  if [[ -z ${basePath} ]]; then
    echoerr "-P base path required with -H host"
    exit 3
  fi
  baseurl="${HTTP}://${host}${basePath}"
fi
if [[ -z ${baseurl} ]]; then
  echoerr "NODE, -b, or -H and -P required"
  exit 1
fi

if [[ -z ${certificate} ]]; then
  echoerr "Certificate in .pem format required."
  exit 1
fi

URL="${baseurl}/v1/log"
if [[ -n ${todate} ]]; then
  add_url_kv ${URL} "toDate" ${todate}
fi
if [[ -n ${fromdate} ]]; then
  add_url_kv ${URL} "fromDate" ${fromdate}
else
  if [[ -n ${offsetminutes} ]]; then
    date_minutes_offset $offsetminutes
    dd=$(date ${OFFSETMINUTES} -u +%Y-%m-%dT%H:%M:%S)
    add_url_kv ${URL} "fromDate" ${dd}
  fi
fi

if [[ -n ${eventtype} ]]; then
  add_url_kv ${URL} "event" ${eventtype}
fi

if [[ -n ${objectFormat} ]]; then
  add_url_kv "${URL}" "formatId" "${objectFormat}"
fi

tmpfile="${TMP}/$(basename $0).$$.xml"

if [[ ! -z ${cachedest} ]]; then
  #Retrieve everything
  ocount=999999999
  if [[ -d ${cachedest} ]]; then
    echo "Error: cache folder ${cachedest} exists. Update not implemented yet."
    exit 1
  else
    mkdir -p ${cachedest}
    cd ${cachedest}
    echo "[config]" > ${cache_meta_name}
    echo "baseurl=\"${baseurl}\"" >> ${cache_meta_name}
    echo "" >> ${cache_meta_name}
    echo "[log]" >> ${cache_meta_name}
  fi
fi
if [[ -n ${raw} ]]; then
  raw_loglist_response ${URL} ${tmpfile} ${ostart} ${ocount}
elif [[ -n ${nagios} ]]; then 
  generate_nagios_output ${URL} ${tmpfile} 0 0
else
  if [[ -f ${cache_page_counter} ]]; then
    PAGE=$(cat ${cache_page_counter})
  else
    PAGE=0
  fi
  STARTURL=${URL}
  GOT=${ostart}
  NGOT=0
  get_log_count ${URL} ${tmpfile}
  if [[ ${ocount} -gt ${log_count} ]]; then
    ocount=${log_count}
  fi
  TOGET=${ocount}
  #while [ $GOT -lt ${TOGET} ]; do
  while (( ${TOGET} > 0 )); do
    get_log_list ${STARTURL} ${tmpfile} ${GOT} ${TOGET}
    if [[ ${status} == "200" ]]; then
      EC=0
      NGOT=$(${XML} sel -N "${NAMESPACE}" \
             -t -m "//d:log" -v "@count" ${tmpfile})
      GOT=$(expr ${GOT} + ${NGOT})
      TOGET=$(expr ${ocount} - ${GOT})
      if (( ${DEBUG} > 0 )); then
        echo "ocount=${ocount}; GOT=${GOT}; NGOT=${NGOT}; TOGET=${TOGET}"
      else
        if [[ ! -z ${cachedest} ]]; then
          _TS=$(date +%Y-%m-%dT%H:%M:%S%z)
          fdest="${cache_record_name}${PAGE}.xml"
          cp ${tmpfile} ${fdest}
          echo ${_TS}" ${fdest} CMD=${_cmd}" >> ${cache_meta_name}
          ((PAGE++))
          # record the next page to get
          echo ${PAGE} > ${cache_page_counter}
        elif [[ -n ${idsonly} ]]; then
          ${XML} sel -N "${NAMESPACE}" \
             -t -m "//logEntry" -v "identifier" -n ${tmpfile} 

        elif [[ -n ${exportdest} ]]; then
              ${XML} sel -N "${NAMESPACE}" \
              -t -m "//logEntry" \
                 -c . \
                 -n ${tmpfile}

        elif [[ -n ${sqldest} ]]; then
            V=$(${XML} sel -t -m "//logEntry" -c . -n ${tmpfile})
            insertLogRecord ${sqldest} "${V}"
        else
              ${XML} sel -N "${NAMESPACE}" \
              -t -m "//logEntry" \
                 -v "entryId" -o " "\
                 -v "event" -o " "\
                 -v "dateLogged" -o "  "\
                 -v "identifier" -o "  "\
                 -v "nodeIdentifier" \
                 -n ${tmpfile}
        fi
    fi
    else
      echoerr "ERROR   : Status of response = ${status}"
      if [[ -n ${verbose} ]]; then
        cat ${tmpfile}
      fi
      EC=2
      break;
    fi
  done
fi

rm ${tmpfile}
exit ${EC}
